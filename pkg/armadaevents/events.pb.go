// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: pkg/armadaevents/events.proto

package armadaevents

import (
	schedulerobjects "github.com/armadaproject/armada/internal/scheduler/schedulerobjects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	v12 "k8s.io/api/batch/v1"
	v11 "k8s.io/api/core/v1"
	v1 "k8s.io/api/networking/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobState int32

const (
	JobState_QUEUED  JobState = 0
	JobState_PENDING JobState = 1
	JobState_RUNNING JobState = 2
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "QUEUED",
		1: "PENDING",
		2: "RUNNING",
	}
	JobState_value = map[string]int32{
		"QUEUED":  0,
		"PENDING": 1,
		"RUNNING": 2,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_armadaevents_events_proto_enumTypes[0].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_pkg_armadaevents_events_proto_enumTypes[0]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{0}
}

// Reason reported by Kubernetes.
type KubernetesReason int32

const (
	KubernetesReason_AppError         KubernetesReason = 0
	KubernetesReason_Evicted          KubernetesReason = 1
	KubernetesReason_OOM              KubernetesReason = 2
	KubernetesReason_DeadlineExceeded KubernetesReason = 3
)

// Enum value maps for KubernetesReason.
var (
	KubernetesReason_name = map[int32]string{
		0: "AppError",
		1: "Evicted",
		2: "OOM",
		3: "DeadlineExceeded",
	}
	KubernetesReason_value = map[string]int32{
		"AppError":         0,
		"Evicted":          1,
		"OOM":              2,
		"DeadlineExceeded": 3,
	}
)

func (x KubernetesReason) Enum() *KubernetesReason {
	p := new(KubernetesReason)
	*p = x
	return p
}

func (x KubernetesReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KubernetesReason) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_armadaevents_events_proto_enumTypes[1].Descriptor()
}

func (KubernetesReason) Type() protoreflect.EnumType {
	return &file_pkg_armadaevents_events_proto_enumTypes[1]
}

func (x KubernetesReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KubernetesReason.Descriptor instead.
func (KubernetesReason) EnumDescriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{1}
}

// Message representing a sequence of state transitions.
// This is the only message type that should ever be published to the log.
type EventSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The system is namespaced by queue, and all events are associated with a job set.
	// Hence, these are included with every message.
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// Each job set has a unique name.
	JobSetName string `protobuf:"bytes,2,opt,name=job_set_name,json=jobSetName,proto3" json:"job_set_name,omitempty"`
	// Id of the user submitting the message. Is passed on to Kubernetes.
	// Leave empty for messages generated by Armada itself.
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// List of groups the user is member of. Is passed on to Kubernetes.
	Groups []string `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	// For efficiency, we bundle several events (i.e., state transitions) in a single log message.
	Events []*EventSequence_Event `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *EventSequence) Reset() {
	*x = EventSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSequence) ProtoMessage() {}

func (x *EventSequence) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSequence.ProtoReflect.Descriptor instead.
func (*EventSequence) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{0}
}

func (x *EventSequence) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *EventSequence) GetJobSetName() string {
	if x != nil {
		return x.JobSetName
	}
	return ""
}

func (x *EventSequence) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EventSequence) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *EventSequence) GetEvents() []*EventSequence_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

// Resource usage of a particular k8s object created as part of a job.
type ResourceUtilisation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId                 *Uuid                         `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId                 *Uuid                         `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	ResourceInfo          *KubernetesResourceInfo       `protobuf:"bytes,3,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	MaxResourcesForPeriod map[string]*resource.Quantity `protobuf:"bytes,4,rep,name=max_resources_for_period,json=maxResourcesForPeriod,proto3" json:"max_resources_for_period,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalCumulativeUsage  map[string]*resource.Quantity `protobuf:"bytes,5,rep,name=total_cumulative_usage,json=totalCumulativeUsage,proto3" json:"total_cumulative_usage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// This is a string representation of the job_id.  Eventually we will retire the job_id field and just use strings
	JobIdStr string `protobuf:"bytes,6,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr string `protobuf:"bytes,7,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
}

func (x *ResourceUtilisation) Reset() {
	*x = ResourceUtilisation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUtilisation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUtilisation) ProtoMessage() {}

func (x *ResourceUtilisation) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUtilisation.ProtoReflect.Descriptor instead.
func (*ResourceUtilisation) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceUtilisation) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *ResourceUtilisation) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *ResourceUtilisation) GetResourceInfo() *KubernetesResourceInfo {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

func (x *ResourceUtilisation) GetMaxResourcesForPeriod() map[string]*resource.Quantity {
	if x != nil {
		return x.MaxResourcesForPeriod
	}
	return nil
}

func (x *ResourceUtilisation) GetTotalCumulativeUsage() map[string]*resource.Quantity {
	if x != nil {
		return x.TotalCumulativeUsage
	}
	return nil
}

func (x *ResourceUtilisation) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *ResourceUtilisation) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

// A UUID, encoded in accordance with section 4.1.2 of RFC 4122
// (technically equivalent to ITU-T Rec. X.667 and ISO/IEC 9834-8).
// As of March 2022, this seems to be the most efficient way to include UUIDs in proto messages; see
// https://github.com/protocolbuffers/protobuf/issues/2224#issuecomment-760635430
type Uuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The high 64 bits of the UUID - MSB -> LSB: time_low (32 bits) | time_mid (16 bits) | time_hi_and_version (16 bits).
	High64 uint64 `protobuf:"fixed64,1,opt,name=high64,proto3" json:"high64,omitempty"`
	// The low 64 bits of the UUID - MSB -> LSB: clock_seq_hi_and_reserved (8 bits) | clock_seq_low (8 bits) | node (48 bits).
	Low64 uint64 `protobuf:"fixed64,2,opt,name=low64,proto3" json:"low64,omitempty"`
}

func (x *Uuid) Reset() {
	*x = Uuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uuid) ProtoMessage() {}

func (x *Uuid) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uuid.ProtoReflect.Descriptor instead.
func (*Uuid) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{2}
}

func (x *Uuid) GetHigh64() uint64 {
	if x != nil {
		return x.High64
	}
	return 0
}

func (x *Uuid) GetLow64() uint64 {
	if x != nil {
		return x.Low64
	}
	return 0
}

// A request to run an Armada job. Each job consists of a set of Kubernetes objects,
// one of which is the main object (typically a pod spec.) and has a priority associated with it.
// When the main object exits, all other objects are cleaned up.
// The priority, together with the queue the job is submitted to, determines the order in which jobs are run.
type SubmitJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each application may be run multiple times. This id uniquely identifies this job.
	JobId *Uuid `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// User-provided id used for server-side deduplication.
	// I.e., jobs submitted with the same deduplication_id as an existing job are discarded.
	// TODO: If we can deduplicate at the API endpoint, we don't need this on the log.
	DeduplicationId string `protobuf:"bytes,2,opt,name=deduplication_id,json=deduplicationId,proto3" json:"deduplication_id,omitempty"`
	// Priority of this job. Measured relative to other jobs in the same queue.
	Priority uint32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	// Shared ObjectMeta for all Kubernetes objects in this job.
	// If provided, the namespace therein is used for all objects that do not explicitly specify another.
	// And the labels and annotations therein are applied to all objects part of the job.
	ObjectMeta *ObjectMeta `protobuf:"bytes,4,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// Main object that determines when an application has finished.
	MainObject *KubernetesMainObject `protobuf:"bytes,5,opt,name=mainObject,proto3" json:"mainObject,omitempty"`
	// Set of additional Kubernetes objects to create as part of the job.
	Objects []*KubernetesObject `protobuf:"bytes,6,rep,name=objects,proto3" json:"objects,omitempty"`
	// Maximum lifetime of the job in seconds. Zero indicates an infinite lifetime.
	Lifetime uint32 `protobuf:"varint,7,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
	// If true, the job is run at most once, i.e., at most one job run will be created for it.
	// If false, the job may be re-leased on failure, which may cause the job to run more than once
	// (e.g., if a job run succeeds but the executor fails before it can report job success).
	AtMostOnce bool `protobuf:"varint,8,opt,name=atMostOnce,proto3" json:"atMostOnce,omitempty"`
	// If true, Armada may preempt the job while running.
	Preemptible bool `protobuf:"varint,9,opt,name=preemptible,proto3" json:"preemptible,omitempty"`
	// If true, Armada may optimistically run several instances of the job concurrently
	// (typically on different clusters).
	// If false, a new job run may only be created once Armada is certain that all existing runs have finished.
	ConcurrencySafe bool `protobuf:"varint,10,opt,name=concurrencySafe,proto3" json:"concurrencySafe,omitempty"`
	// Indicates which scheduler should manage this job.
	// If empty, the default scheduler is used.
	Scheduler string `protobuf:"bytes,11,opt,name=scheduler,proto3" json:"scheduler,omitempty"`
	// Indicates whether job is a duplicate
	IsDuplicate bool `protobuf:"varint,12,opt,name=isDuplicate,proto3" json:"isDuplicate,omitempty"`
	// Ordinal 13 was originally used for queue_ttl_seconds
	// This is a string representation of the job_id.  Eventually we will retire the job_id field and just use strings
	JobIdStr string `protobuf:"bytes,14,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *SubmitJob) Reset() {
	*x = SubmitJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJob) ProtoMessage() {}

func (x *SubmitJob) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJob.ProtoReflect.Descriptor instead.
func (*SubmitJob) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitJob) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *SubmitJob) GetDeduplicationId() string {
	if x != nil {
		return x.DeduplicationId
	}
	return ""
}

func (x *SubmitJob) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SubmitJob) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *SubmitJob) GetMainObject() *KubernetesMainObject {
	if x != nil {
		return x.MainObject
	}
	return nil
}

func (x *SubmitJob) GetObjects() []*KubernetesObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *SubmitJob) GetLifetime() uint32 {
	if x != nil {
		return x.Lifetime
	}
	return 0
}

func (x *SubmitJob) GetAtMostOnce() bool {
	if x != nil {
		return x.AtMostOnce
	}
	return false
}

func (x *SubmitJob) GetPreemptible() bool {
	if x != nil {
		return x.Preemptible
	}
	return false
}

func (x *SubmitJob) GetConcurrencySafe() bool {
	if x != nil {
		return x.ConcurrencySafe
	}
	return false
}

func (x *SubmitJob) GetScheduler() string {
	if x != nil {
		return x.Scheduler
	}
	return ""
}

func (x *SubmitJob) GetIsDuplicate() bool {
	if x != nil {
		return x.IsDuplicate
	}
	return false
}

func (x *SubmitJob) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

// Kubernetes objects that can serve as main objects for an Armada job.
type KubernetesMainObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta *ObjectMeta `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// Types that are assignable to Object:
	//
	//	*KubernetesMainObject_PodSpec
	//	*KubernetesMainObject_JobSpec
	Object isKubernetesMainObject_Object `protobuf_oneof:"object"`
}

func (x *KubernetesMainObject) Reset() {
	*x = KubernetesMainObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesMainObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesMainObject) ProtoMessage() {}

func (x *KubernetesMainObject) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesMainObject.ProtoReflect.Descriptor instead.
func (*KubernetesMainObject) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{4}
}

func (x *KubernetesMainObject) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (m *KubernetesMainObject) GetObject() isKubernetesMainObject_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *KubernetesMainObject) GetPodSpec() *PodSpecWithAvoidList {
	if x, ok := x.GetObject().(*KubernetesMainObject_PodSpec); ok {
		return x.PodSpec
	}
	return nil
}

func (x *KubernetesMainObject) GetJobSpec() *JobSpecWithAvoidList {
	if x, ok := x.GetObject().(*KubernetesMainObject_JobSpec); ok {
		return x.JobSpec
	}
	return nil
}

type isKubernetesMainObject_Object interface {
	isKubernetesMainObject_Object()
}

type KubernetesMainObject_PodSpec struct {
	PodSpec *PodSpecWithAvoidList `protobuf:"bytes,2,opt,name=pod_spec,json=podSpec,proto3,oneof"`
}

type KubernetesMainObject_JobSpec struct {
	JobSpec *JobSpecWithAvoidList `protobuf:"bytes,3,opt,name=job_spec,json=jobSpec,proto3,oneof"`
}

func (*KubernetesMainObject_PodSpec) isKubernetesMainObject_Object() {}

func (*KubernetesMainObject_JobSpec) isKubernetesMainObject_Object() {}

// Kubernetes objects that can be created as part of an Armada.
type KubernetesObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta *ObjectMeta `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// Types that are assignable to Object:
	//
	//	*KubernetesObject_PodSpec
	//	*KubernetesObject_Ingress
	//	*KubernetesObject_Service
	//	*KubernetesObject_ConfigMap
	//	*KubernetesObject_JobSpec
	Object isKubernetesObject_Object `protobuf_oneof:"object"`
}

func (x *KubernetesObject) Reset() {
	*x = KubernetesObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesObject) ProtoMessage() {}

func (x *KubernetesObject) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesObject.ProtoReflect.Descriptor instead.
func (*KubernetesObject) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{5}
}

func (x *KubernetesObject) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (m *KubernetesObject) GetObject() isKubernetesObject_Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (x *KubernetesObject) GetPodSpec() *PodSpecWithAvoidList {
	if x, ok := x.GetObject().(*KubernetesObject_PodSpec); ok {
		return x.PodSpec
	}
	return nil
}

func (x *KubernetesObject) GetIngress() *v1.IngressSpec {
	if x, ok := x.GetObject().(*KubernetesObject_Ingress); ok {
		return x.Ingress
	}
	return nil
}

func (x *KubernetesObject) GetService() *v11.ServiceSpec {
	if x, ok := x.GetObject().(*KubernetesObject_Service); ok {
		return x.Service
	}
	return nil
}

func (x *KubernetesObject) GetConfigMap() *v11.ConfigMap {
	if x, ok := x.GetObject().(*KubernetesObject_ConfigMap); ok {
		return x.ConfigMap
	}
	return nil
}

func (x *KubernetesObject) GetJobSpec() *JobSpecWithAvoidList {
	if x, ok := x.GetObject().(*KubernetesObject_JobSpec); ok {
		return x.JobSpec
	}
	return nil
}

type isKubernetesObject_Object interface {
	isKubernetesObject_Object()
}

type KubernetesObject_PodSpec struct {
	PodSpec *PodSpecWithAvoidList `protobuf:"bytes,2,opt,name=pod_spec,json=podSpec,proto3,oneof"`
}

type KubernetesObject_Ingress struct {
	Ingress *v1.IngressSpec `protobuf:"bytes,3,opt,name=ingress,proto3,oneof"`
}

type KubernetesObject_Service struct {
	Service *v11.ServiceSpec `protobuf:"bytes,4,opt,name=service,proto3,oneof"`
}

type KubernetesObject_ConfigMap struct {
	ConfigMap *v11.ConfigMap `protobuf:"bytes,5,opt,name=configMap,proto3,oneof"`
}

type KubernetesObject_JobSpec struct {
	JobSpec *JobSpecWithAvoidList `protobuf:"bytes,6,opt,name=job_spec,json=jobSpec,proto3,oneof"`
}

func (*KubernetesObject_PodSpec) isKubernetesObject_Object() {}

func (*KubernetesObject_Ingress) isKubernetesObject_Object() {}

func (*KubernetesObject_Service) isKubernetesObject_Object() {}

func (*KubernetesObject_ConfigMap) isKubernetesObject_Object() {}

func (*KubernetesObject_JobSpec) isKubernetesObject_Object() {}

// Auxiliary information needed to instantiate the object in Kubernetes.
// Inspired by the Kubernetes ObjectMeta object; see:
// https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/generated.proto#L641
type ObjectMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of the executor responsible for the Kubernetes cluster that created the object.
	// Is set by the executor on object creation.
	ExecutorId string `protobuf:"bytes,1,opt,name=executor_id,json=executorId,proto3" json:"executor_id,omitempty"`
	Namespace  string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Unique id assigned to the object by Kubernetes (typically a 128-bit UUID).
	// Should be left empty on job creation, but should be set, e.g., when in the JobRunRunning message.
	// Stored as a string because Kubernetes doesn't always use UUIDs; see
	// https://github.com/kubernetes/apimachinery/blob/master/pkg/types/uid.go#L19
	KubernetesId string            `protobuf:"bytes,4,opt,name=kubernetes_id,json=kubernetesId,proto3" json:"kubernetes_id,omitempty"`
	Annotations  map[string]string `protobuf:"bytes,5,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels       map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ObjectMeta) Reset() {
	*x = ObjectMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectMeta) ProtoMessage() {}

func (x *ObjectMeta) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectMeta.ProtoReflect.Descriptor instead.
func (*ObjectMeta) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{6}
}

func (x *ObjectMeta) GetExecutorId() string {
	if x != nil {
		return x.ExecutorId
	}
	return ""
}

func (x *ObjectMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ObjectMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ObjectMeta) GetKubernetesId() string {
	if x != nil {
		return x.KubernetesId
	}
	return ""
}

func (x *ObjectMeta) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *ObjectMeta) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Kubernetes pod spec with a bundled list of nodes to avoid scheduling the pod to.
type PodSpecWithAvoidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodSpec *v11.PodSpec `protobuf:"bytes,1,opt,name=pod_spec,json=podSpec,proto3" json:"pod_spec,omitempty"`
	// List of nodes to avoid scheduling this pod on.
	// TODO: Could this be done with selectors, taints, etc?
	NodeAvoidlist []string `protobuf:"bytes,2,rep,name=node_avoidlist,json=nodeAvoidlist,proto3" json:"node_avoidlist,omitempty"`
}

func (x *PodSpecWithAvoidList) Reset() {
	*x = PodSpecWithAvoidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodSpecWithAvoidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodSpecWithAvoidList) ProtoMessage() {}

func (x *PodSpecWithAvoidList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodSpecWithAvoidList.ProtoReflect.Descriptor instead.
func (*PodSpecWithAvoidList) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{7}
}

func (x *PodSpecWithAvoidList) GetPodSpec() *v11.PodSpec {
	if x != nil {
		return x.PodSpec
	}
	return nil
}

func (x *PodSpecWithAvoidList) GetNodeAvoidlist() []string {
	if x != nil {
		return x.NodeAvoidlist
	}
	return nil
}

// Kubernetes job spec with a bundled list of nodes to avoid scheduling the job to.
type JobSpecWithAvoidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobSpec *v12.JobSpec `protobuf:"bytes,1,opt,name=job_spec,json=jobSpec,proto3" json:"job_spec,omitempty"`
	// List of nodes to avoid scheduling this job on.
	NodeAvoidlist []string `protobuf:"bytes,2,rep,name=node_avoidlist,json=nodeAvoidlist,proto3" json:"node_avoidlist,omitempty"`
}

func (x *JobSpecWithAvoidList) Reset() {
	*x = JobSpecWithAvoidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSpecWithAvoidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSpecWithAvoidList) ProtoMessage() {}

func (x *JobSpecWithAvoidList) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSpecWithAvoidList.ProtoReflect.Descriptor instead.
func (*JobSpecWithAvoidList) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{8}
}

func (x *JobSpecWithAvoidList) GetJobSpec() *v12.JobSpec {
	if x != nil {
		return x.JobSpec
	}
	return nil
}

func (x *JobSpecWithAvoidList) GetNodeAvoidlist() []string {
	if x != nil {
		return x.NodeAvoidlist
	}
	return nil
}

// Set the priority of a particular job.
type ReprioritiseJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    *Uuid  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Priority uint32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	JobIdStr string `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *ReprioritiseJob) Reset() {
	*x = ReprioritiseJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReprioritiseJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReprioritiseJob) ProtoMessage() {}

func (x *ReprioritiseJob) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReprioritiseJob.ProtoReflect.Descriptor instead.
func (*ReprioritiseJob) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{9}
}

func (x *ReprioritiseJob) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *ReprioritiseJob) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ReprioritiseJob) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

type JobRequeued struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId          *Uuid                               `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	SchedulingInfo *schedulerobjects.JobSchedulingInfo `protobuf:"bytes,2,opt,name=scheduling_info,json=schedulingInfo,proto3" json:"scheduling_info,omitempty"`
	// Used by the scheduler to maintain a consistent state
	UpdateSequenceNumber int32  `protobuf:"varint,3,opt,name=update_sequence_number,json=updateSequenceNumber,proto3" json:"update_sequence_number,omitempty"`
	JobIdStr             string `protobuf:"bytes,4,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *JobRequeued) Reset() {
	*x = JobRequeued{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRequeued) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRequeued) ProtoMessage() {}

func (x *JobRequeued) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRequeued.ProtoReflect.Descriptor instead.
func (*JobRequeued) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{10}
}

func (x *JobRequeued) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobRequeued) GetSchedulingInfo() *schedulerobjects.JobSchedulingInfo {
	if x != nil {
		return x.SchedulingInfo
	}
	return nil
}

func (x *JobRequeued) GetUpdateSequenceNumber() int32 {
	if x != nil {
		return x.UpdateSequenceNumber
	}
	return 0
}

func (x *JobRequeued) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

// Set the priority of all jobs part of a job set.
// This sets the priority of all jobs in the job set currently in the queued state.
type ReprioritiseJobSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ReprioritiseJobSet) Reset() {
	*x = ReprioritiseJobSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReprioritiseJobSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReprioritiseJobSet) ProtoMessage() {}

func (x *ReprioritiseJobSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReprioritiseJobSet.ProtoReflect.Descriptor instead.
func (*ReprioritiseJobSet) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{11}
}

func (x *ReprioritiseJobSet) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

// Generated by the scheduler in response to ReprioritiseJob and ReprioritiseJobSet.
// One such message is generated per job that was re-prioritised and includes the new priority.
type ReprioritisedJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    *Uuid  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Priority uint32 `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	JobIdStr string `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *ReprioritisedJob) Reset() {
	*x = ReprioritisedJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReprioritisedJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReprioritisedJob) ProtoMessage() {}

func (x *ReprioritisedJob) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReprioritisedJob.ProtoReflect.Descriptor instead.
func (*ReprioritisedJob) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{12}
}

func (x *ReprioritisedJob) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *ReprioritisedJob) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *ReprioritisedJob) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

// A request to cancel a particular job.
// This will cancel all runs (preempting it if running) for the job (i.e., move them to the failed state)
// and then cancel job itself (i.e., move it to the failed state).
type CancelJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    *Uuid  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	JobIdStr string `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *CancelJob) Reset() {
	*x = CancelJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJob) ProtoMessage() {}

func (x *CancelJob) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJob.ProtoReflect.Descriptor instead.
func (*CancelJob) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{13}
}

func (x *CancelJob) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *CancelJob) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CancelJob) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

// Filter to be used when cancelling job sets
// This allows users to cancel all jobs in a given state for a specific job set
type JobSetFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []JobState `protobuf:"varint,1,rep,packed,name=states,proto3,enum=armadaevents.JobState" json:"states,omitempty"`
}

func (x *JobSetFilter) Reset() {
	*x = JobSetFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSetFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetFilter) ProtoMessage() {}

func (x *JobSetFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetFilter.ProtoReflect.Descriptor instead.
func (*JobSetFilter) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{14}
}

func (x *JobSetFilter) GetStates() []JobState {
	if x != nil {
		return x.States
	}
	return nil
}

// Request to cancel all jobs in a job set.
// Empty set of states means all states
type CancelJobSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []JobState `protobuf:"varint,1,rep,packed,name=states,proto3,enum=armadaevents.JobState" json:"states,omitempty"`
	Reason string     `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CancelJobSet) Reset() {
	*x = CancelJobSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobSet) ProtoMessage() {}

func (x *CancelJobSet) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobSet.ProtoReflect.Descriptor instead.
func (*CancelJobSet) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{15}
}

func (x *CancelJobSet) GetStates() []JobState {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *CancelJobSet) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Generated by the scheduler in response to CancelJob and CancelJobSet.
// One such message is generated per job that was cancelled.
type CancelledJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    *Uuid  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	JobIdStr string `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *CancelledJob) Reset() {
	*x = CancelledJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelledJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelledJob) ProtoMessage() {}

func (x *CancelledJob) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelledJob.ProtoReflect.Descriptor instead.
func (*CancelledJob) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{16}
}

func (x *CancelledJob) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *CancelledJob) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *CancelledJob) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

type JobSucceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId *Uuid `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Runtime information, e.g., which node the job is running on, its IP address etc,
	// for each resource created for the job run.
	// TODO: remove this once we have fixed the external api
	ResourceInfos []*KubernetesResourceInfo `protobuf:"bytes,2,rep,name=resourceInfos,proto3" json:"resourceInfos,omitempty"`
	JobIdStr      string                    `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *JobSucceeded) Reset() {
	*x = JobSucceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobSucceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSucceeded) ProtoMessage() {}

func (x *JobSucceeded) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSucceeded.ProtoReflect.Descriptor instead.
func (*JobSucceeded) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{17}
}

func (x *JobSucceeded) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobSucceeded) GetResourceInfos() []*KubernetesResourceInfo {
	if x != nil {
		return x.ResourceInfos
	}
	return nil
}

func (x *JobSucceeded) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

// Indicates that a job has been leased to a cluster by the Armada scheduler.
type JobRunLeased struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId *Uuid `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId *Uuid `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Each cluster is represented by an executor.
	ExecutorId string `protobuf:"bytes,3,opt,name=executor_id,json=executorId,proto3" json:"executor_id,omitempty"`
	NodeId     string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Used by the scheduler to maintain a consistent state
	UpdateSequenceNumber int32 `protobuf:"varint,5,opt,name=update_sequence_number,json=updateSequenceNumber,proto3" json:"update_sequence_number,omitempty"`
	// This bool is here because it is the most ergonomic way of distinguishing
	// the case where `scheduled_at_priority` was explicitly set to zero from
	// the case where it was not set at all.
	HasScheduledAtPriority bool `protobuf:"varint,6,opt,name=has_scheduled_at_priority,json=hasScheduledAtPriority,proto3" json:"has_scheduled_at_priority,omitempty"`
	// Priority class priority that this job was scheduled at.
	//
	// This is usually equal to the priority of the job's priority class, except
	// in the case where the job was scheduled as an away job; this field is
	// used to distinguish this case from the case where the job was scheduled
	// as a home job.
	ScheduledAtPriority int32 `protobuf:"varint,7,opt,name=scheduled_at_priority,json=scheduledAtPriority,proto3" json:"scheduled_at_priority,omitempty"`
	// The scheduler uses this field to modify the pod requirements of a job;
	// for example, it may add additional tolerations to runs that are scheduled
	// as away jobs.
	PodRequirementsOverlay *schedulerobjects.PodRequirements `protobuf:"bytes,9,opt,name=pod_requirements_overlay,json=podRequirementsOverlay,proto3" json:"pod_requirements_overlay,omitempty"`
	JobIdStr               string                            `protobuf:"bytes,10,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr               string                            `protobuf:"bytes,11,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
	// pool is the pool this run was scheduled on to
	// This would be determined by the pool of the node this run was scheduled on to, at the time of scheduling
	Pool string `protobuf:"bytes,12,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *JobRunLeased) Reset() {
	*x = JobRunLeased{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunLeased) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunLeased) ProtoMessage() {}

func (x *JobRunLeased) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunLeased.ProtoReflect.Descriptor instead.
func (*JobRunLeased) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{18}
}

func (x *JobRunLeased) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *JobRunLeased) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobRunLeased) GetExecutorId() string {
	if x != nil {
		return x.ExecutorId
	}
	return ""
}

func (x *JobRunLeased) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *JobRunLeased) GetUpdateSequenceNumber() int32 {
	if x != nil {
		return x.UpdateSequenceNumber
	}
	return 0
}

func (x *JobRunLeased) GetHasScheduledAtPriority() bool {
	if x != nil {
		return x.HasScheduledAtPriority
	}
	return false
}

func (x *JobRunLeased) GetScheduledAtPriority() int32 {
	if x != nil {
		return x.ScheduledAtPriority
	}
	return 0
}

func (x *JobRunLeased) GetPodRequirementsOverlay() *schedulerobjects.PodRequirements {
	if x != nil {
		return x.PodRequirementsOverlay
	}
	return nil
}

func (x *JobRunLeased) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *JobRunLeased) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

func (x *JobRunLeased) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

// Indicates that a job has been assigned to nodes by Kubernetes.
type JobRunAssigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId *Uuid `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId *Uuid `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Runtime information, e.g., which node the job is running on, its IP address etc,
	// for each resource created for the job run.
	// Included here and in JobRunRunning for compatibility with legacy messages.
	ResourceInfos []*KubernetesResourceInfo `protobuf:"bytes,3,rep,name=resourceInfos,proto3" json:"resourceInfos,omitempty"`
	JobIdStr      string                    `protobuf:"bytes,4,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr      string                    `protobuf:"bytes,5,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
}

func (x *JobRunAssigned) Reset() {
	*x = JobRunAssigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunAssigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunAssigned) ProtoMessage() {}

func (x *JobRunAssigned) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunAssigned.ProtoReflect.Descriptor instead.
func (*JobRunAssigned) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{19}
}

func (x *JobRunAssigned) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *JobRunAssigned) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobRunAssigned) GetResourceInfos() []*KubernetesResourceInfo {
	if x != nil {
		return x.ResourceInfos
	}
	return nil
}

func (x *JobRunAssigned) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *JobRunAssigned) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

// Indicates that the resources required by the job have been created and that the job is now running.
type JobRunRunning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId *Uuid `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId *Uuid `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Runtime information, e.g., which node the job is running on, its IP address etc,
	// for each resource created for the job run.
	ResourceInfos []*KubernetesResourceInfo `protobuf:"bytes,3,rep,name=resourceInfos,proto3" json:"resourceInfos,omitempty"`
	JobIdStr      string                    `protobuf:"bytes,4,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr      string                    `protobuf:"bytes,5,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
}

func (x *JobRunRunning) Reset() {
	*x = JobRunRunning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunRunning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunRunning) ProtoMessage() {}

func (x *JobRunRunning) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunRunning.ProtoReflect.Descriptor instead.
func (*JobRunRunning) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{20}
}

func (x *JobRunRunning) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *JobRunRunning) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobRunRunning) GetResourceInfos() []*KubernetesResourceInfo {
	if x != nil {
		return x.ResourceInfos
	}
	return nil
}

func (x *JobRunRunning) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *JobRunRunning) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

// Message containing runtime information about some resource created for a job.
type KubernetesResourceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta *ObjectMeta `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// Types that are assignable to Info:
	//
	//	*KubernetesResourceInfo_PodInfo
	//	*KubernetesResourceInfo_IngressInfo
	Info isKubernetesResourceInfo_Info `protobuf_oneof:"info"`
}

func (x *KubernetesResourceInfo) Reset() {
	*x = KubernetesResourceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesResourceInfo) ProtoMessage() {}

func (x *KubernetesResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesResourceInfo.ProtoReflect.Descriptor instead.
func (*KubernetesResourceInfo) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{21}
}

func (x *KubernetesResourceInfo) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (m *KubernetesResourceInfo) GetInfo() isKubernetesResourceInfo_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *KubernetesResourceInfo) GetPodInfo() *PodInfo {
	if x, ok := x.GetInfo().(*KubernetesResourceInfo_PodInfo); ok {
		return x.PodInfo
	}
	return nil
}

func (x *KubernetesResourceInfo) GetIngressInfo() *IngressInfo {
	if x, ok := x.GetInfo().(*KubernetesResourceInfo_IngressInfo); ok {
		return x.IngressInfo
	}
	return nil
}

type isKubernetesResourceInfo_Info interface {
	isKubernetesResourceInfo_Info()
}

type KubernetesResourceInfo_PodInfo struct {
	PodInfo *PodInfo `protobuf:"bytes,2,opt,name=podInfo,proto3,oneof"`
}

type KubernetesResourceInfo_IngressInfo struct {
	IngressInfo *IngressInfo `protobuf:"bytes,3,opt,name=ingressInfo,proto3,oneof"`
}

func (*KubernetesResourceInfo_PodInfo) isKubernetesResourceInfo_Info() {}

func (*KubernetesResourceInfo_IngressInfo) isKubernetesResourceInfo_Info() {}

// Runtime information of a pod.
type PodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName  string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber int32  `protobuf:"varint,2,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
}

func (x *PodInfo) Reset() {
	*x = PodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodInfo) ProtoMessage() {}

func (x *PodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodInfo.ProtoReflect.Descriptor instead.
func (*PodInfo) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{22}
}

func (x *PodInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PodInfo) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

// Runtime information of an ingress.
type IngressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Why a node name?
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// TODO: Why a map?
	IngressAddresses map[int32]string `protobuf:"bytes,2,rep,name=ingress_addresses,json=ingressAddresses,proto3" json:"ingress_addresses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IngressInfo) Reset() {
	*x = IngressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressInfo) ProtoMessage() {}

func (x *IngressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressInfo.ProtoReflect.Descriptor instead.
func (*IngressInfo) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{23}
}

func (x *IngressInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *IngressInfo) GetIngressAddresses() map[int32]string {
	if x != nil {
		return x.IngressAddresses
	}
	return nil
}

// For sending details associated with a created ingress.
// Used for compatibility with legacy messages, which send ingress info as its own message.
// Later, this info should be bundled with the JobRunRunning message.
type StandaloneIngressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId *Uuid `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId *Uuid `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// ObjectMeta associated with the ingress.
	ObjectMeta       *ObjectMeta      `protobuf:"bytes,3,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	IngressAddresses map[int32]string `protobuf:"bytes,4,rep,name=ingress_addresses,json=ingressAddresses,proto3" json:"ingress_addresses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The legacy message bundles info associated with the pod.
	NodeName     string `protobuf:"bytes,5,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber    int32  `protobuf:"varint,6,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	PodName      string `protobuf:"bytes,7,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodNamespace string `protobuf:"bytes,8,opt,name=pod_namespace,json=podNamespace,proto3" json:"pod_namespace,omitempty"`
	JobIdStr     string `protobuf:"bytes,9,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr     string `protobuf:"bytes,10,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
}

func (x *StandaloneIngressInfo) Reset() {
	*x = StandaloneIngressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandaloneIngressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandaloneIngressInfo) ProtoMessage() {}

func (x *StandaloneIngressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandaloneIngressInfo.ProtoReflect.Descriptor instead.
func (*StandaloneIngressInfo) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{24}
}

func (x *StandaloneIngressInfo) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *StandaloneIngressInfo) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *StandaloneIngressInfo) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *StandaloneIngressInfo) GetIngressAddresses() map[int32]string {
	if x != nil {
		return x.IngressAddresses
	}
	return nil
}

func (x *StandaloneIngressInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *StandaloneIngressInfo) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *StandaloneIngressInfo) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *StandaloneIngressInfo) GetPodNamespace() string {
	if x != nil {
		return x.PodNamespace
	}
	return ""
}

func (x *StandaloneIngressInfo) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *StandaloneIngressInfo) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

// Indicates that the job finished successfully (i.e., in the expected manner).
type JobRunSucceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId *Uuid `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId *Uuid `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Runtime information, e.g., which node the job is running on, its IP address etc,
	// for each resource created for the job run.
	// TODO: remove this once we have fixed the external api
	ResourceInfos []*KubernetesResourceInfo `protobuf:"bytes,3,rep,name=resourceInfos,proto3" json:"resourceInfos,omitempty"`
	JobIdStr      string                    `protobuf:"bytes,4,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr      string                    `protobuf:"bytes,5,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
}

func (x *JobRunSucceeded) Reset() {
	*x = JobRunSucceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunSucceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunSucceeded) ProtoMessage() {}

func (x *JobRunSucceeded) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunSucceeded.ProtoReflect.Descriptor instead.
func (*JobRunSucceeded) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{25}
}

func (x *JobRunSucceeded) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *JobRunSucceeded) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobRunSucceeded) GetResourceInfos() []*KubernetesResourceInfo {
	if x != nil {
		return x.ResourceInfos
	}
	return nil
}

func (x *JobRunSucceeded) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *JobRunSucceeded) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

// Message containing a set of errors associated with a particular job.
// Contains a flag, which if set to true indicates that the job has failed.
// Otherwise, this message represents a set of errors from which the system has recovered.
type JobErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId *Uuid `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// A set of errors that occurred within some context.
	Errors   []*Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	JobIdStr string   `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *JobErrors) Reset() {
	*x = JobErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobErrors) ProtoMessage() {}

func (x *JobErrors) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobErrors.ProtoReflect.Descriptor instead.
func (*JobErrors) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{26}
}

func (x *JobErrors) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobErrors) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *JobErrors) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

// Message containing a set of errors associated with a particular job run.
// Contains a flag, which if set to true indicates that the job run has failed.
// Otherwise, this message represents a set of errors from which the system has recovered.
//
// Because each error may specify a parent error, the set of errors form a tree.
//
// Services may listen for these messages to obtain realtime information about errors associated with jobs.
type JobRunErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId *Uuid `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId *Uuid `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// A set of errors that occurred within some context.
	Errors   []*Error `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	JobIdStr string   `protobuf:"bytes,4,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr string   `protobuf:"bytes,5,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
}

func (x *JobRunErrors) Reset() {
	*x = JobRunErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunErrors) ProtoMessage() {}

func (x *JobRunErrors) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunErrors.ProtoReflect.Descriptor instead.
func (*JobRunErrors) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{27}
}

func (x *JobRunErrors) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *JobRunErrors) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobRunErrors) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *JobRunErrors) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *JobRunErrors) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

// Represents a failure that took place in the course of a job run (i.e., an attempt to run a job).
// Each failure is either a resource failure or a system-level failure.
// Resource failures correspond to a problem with a specific Kubernetes resource
// (e.g., if a container terminates with a non-zero exit code).
// System-level failure messages are created by the executor (e.g., a failure by the executor to write to Kubernetes).
//
// This message may only be published to the log as part of a JobRunError message.
// TODO: Check if the container status contained any useful info for non-failed containers.
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, this error represents an unrecoverable failure and Armada has given up on this job or job run.
	Terminal bool `protobuf:"varint,1,opt,name=terminal,proto3" json:"terminal,omitempty"`
	// Additional information for this particular combination of component and error. May be set to nil.
	//
	// Types that are assignable to Reason:
	//
	//	*Error_KubernetesError
	//	*Error_ContainerError
	//	*Error_ExecutorError
	//	*Error_PodUnschedulable
	//	*Error_LeaseExpired
	//	*Error_MaxRunsExceeded
	//	*Error_PodError
	//	*Error_PodLeaseReturned
	//	*Error_PodTerminated
	//	*Error_JobRunPreemptedError
	//	*Error_GangJobUnschedulable
	//	*Error_JobRejected
	Reason isError_Reason `protobuf_oneof:"reason"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{28}
}

func (x *Error) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

func (m *Error) GetReason() isError_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *Error) GetKubernetesError() *KubernetesError {
	if x, ok := x.GetReason().(*Error_KubernetesError); ok {
		return x.KubernetesError
	}
	return nil
}

func (x *Error) GetContainerError() *ContainerError {
	if x, ok := x.GetReason().(*Error_ContainerError); ok {
		return x.ContainerError
	}
	return nil
}

func (x *Error) GetExecutorError() *ExecutorError {
	if x, ok := x.GetReason().(*Error_ExecutorError); ok {
		return x.ExecutorError
	}
	return nil
}

func (x *Error) GetPodUnschedulable() *PodUnschedulable {
	if x, ok := x.GetReason().(*Error_PodUnschedulable); ok {
		return x.PodUnschedulable
	}
	return nil
}

func (x *Error) GetLeaseExpired() *LeaseExpired {
	if x, ok := x.GetReason().(*Error_LeaseExpired); ok {
		return x.LeaseExpired
	}
	return nil
}

func (x *Error) GetMaxRunsExceeded() *MaxRunsExceeded {
	if x, ok := x.GetReason().(*Error_MaxRunsExceeded); ok {
		return x.MaxRunsExceeded
	}
	return nil
}

func (x *Error) GetPodError() *PodError {
	if x, ok := x.GetReason().(*Error_PodError); ok {
		return x.PodError
	}
	return nil
}

func (x *Error) GetPodLeaseReturned() *PodLeaseReturned {
	if x, ok := x.GetReason().(*Error_PodLeaseReturned); ok {
		return x.PodLeaseReturned
	}
	return nil
}

func (x *Error) GetPodTerminated() *PodTerminated {
	if x, ok := x.GetReason().(*Error_PodTerminated); ok {
		return x.PodTerminated
	}
	return nil
}

func (x *Error) GetJobRunPreemptedError() *JobRunPreemptedError {
	if x, ok := x.GetReason().(*Error_JobRunPreemptedError); ok {
		return x.JobRunPreemptedError
	}
	return nil
}

func (x *Error) GetGangJobUnschedulable() *GangJobUnschedulable {
	if x, ok := x.GetReason().(*Error_GangJobUnschedulable); ok {
		return x.GangJobUnschedulable
	}
	return nil
}

func (x *Error) GetJobRejected() *JobRejected {
	if x, ok := x.GetReason().(*Error_JobRejected); ok {
		return x.JobRejected
	}
	return nil
}

type isError_Reason interface {
	isError_Reason()
}

type Error_KubernetesError struct {
	KubernetesError *KubernetesError `protobuf:"bytes,2,opt,name=kubernetesError,proto3,oneof"`
}

type Error_ContainerError struct {
	ContainerError *ContainerError `protobuf:"bytes,3,opt,name=containerError,proto3,oneof"`
}

type Error_ExecutorError struct {
	ExecutorError *ExecutorError `protobuf:"bytes,4,opt,name=executorError,proto3,oneof"`
}

type Error_PodUnschedulable struct {
	PodUnschedulable *PodUnschedulable `protobuf:"bytes,5,opt,name=podUnschedulable,proto3,oneof"`
}

type Error_LeaseExpired struct {
	LeaseExpired *LeaseExpired `protobuf:"bytes,6,opt,name=leaseExpired,proto3,oneof"`
}

type Error_MaxRunsExceeded struct {
	MaxRunsExceeded *MaxRunsExceeded `protobuf:"bytes,7,opt,name=maxRunsExceeded,proto3,oneof"`
}

type Error_PodError struct {
	PodError *PodError `protobuf:"bytes,8,opt,name=podError,proto3,oneof"`
}

type Error_PodLeaseReturned struct {
	PodLeaseReturned *PodLeaseReturned `protobuf:"bytes,9,opt,name=podLeaseReturned,proto3,oneof"`
}

type Error_PodTerminated struct {
	PodTerminated *PodTerminated `protobuf:"bytes,10,opt,name=podTerminated,proto3,oneof"`
}

type Error_JobRunPreemptedError struct {
	JobRunPreemptedError *JobRunPreemptedError `protobuf:"bytes,11,opt,name=jobRunPreemptedError,proto3,oneof"`
}

type Error_GangJobUnschedulable struct {
	GangJobUnschedulable *GangJobUnschedulable `protobuf:"bytes,12,opt,name=gangJobUnschedulable,proto3,oneof"`
}

type Error_JobRejected struct {
	JobRejected *JobRejected `protobuf:"bytes,13,opt,name=jobRejected,proto3,oneof"`
}

func (*Error_KubernetesError) isError_Reason() {}

func (*Error_ContainerError) isError_Reason() {}

func (*Error_ExecutorError) isError_Reason() {}

func (*Error_PodUnschedulable) isError_Reason() {}

func (*Error_LeaseExpired) isError_Reason() {}

func (*Error_MaxRunsExceeded) isError_Reason() {}

func (*Error_PodError) isError_Reason() {}

func (*Error_PodLeaseReturned) isError_Reason() {}

func (*Error_PodTerminated) isError_Reason() {}

func (*Error_JobRunPreemptedError) isError_Reason() {}

func (*Error_GangJobUnschedulable) isError_Reason() {}

func (*Error_JobRejected) isError_Reason() {}

// Represents an error associated with a particular Kubernetes resource.
type KubernetesError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of Kubernetes resource (e.g., ingress).
	ResourceType string `protobuf:"bytes,1,opt,name=resourceType,proto3" json:"resourceType,omitempty"`
	// Id assigned to the resource by Kubernetes.
	ResourceId *Uuid `protobuf:"bytes,2,opt,name=resourceId,proto3" json:"resourceId,omitempty"`
}

func (x *KubernetesError) Reset() {
	*x = KubernetesError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesError) ProtoMessage() {}

func (x *KubernetesError) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesError.ProtoReflect.Descriptor instead.
func (*KubernetesError) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{29}
}

func (x *KubernetesError) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *KubernetesError) GetResourceId() *Uuid {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

// Indicates one or more of the containers in the pod failed.
type PodError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This ObjectMeta identifies the Pod.
	ObjectMeta       *ObjectMeta       `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Message          string            `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NodeName         string            `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber        int32             `protobuf:"varint,4,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	ContainerErrors  []*ContainerError `protobuf:"bytes,5,rep,name=containerErrors,proto3" json:"containerErrors,omitempty"`
	KubernetesReason KubernetesReason  `protobuf:"varint,6,opt,name=kubernetes_reason,json=kubernetesReason,proto3,enum=armadaevents.KubernetesReason" json:"kubernetes_reason,omitempty"`
	DebugMessage     string            `protobuf:"bytes,7,opt,name=debugMessage,proto3" json:"debugMessage,omitempty"`
}

func (x *PodError) Reset() {
	*x = PodError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodError) ProtoMessage() {}

func (x *PodError) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodError.ProtoReflect.Descriptor instead.
func (*PodError) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{30}
}

func (x *PodError) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *PodError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PodError) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PodError) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *PodError) GetContainerErrors() []*ContainerError {
	if x != nil {
		return x.ContainerErrors
	}
	return nil
}

func (x *PodError) GetKubernetesReason() KubernetesReason {
	if x != nil {
		return x.KubernetesReason
	}
	return KubernetesReason_AppError
}

func (x *PodError) GetDebugMessage() string {
	if x != nil {
		return x.DebugMessage
	}
	return ""
}

type ContainerError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this ObjectMeta identifies the container
	ObjectMeta *ObjectMeta `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	// Exit code of the application running in the container.
	ExitCode int32 `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Corresponds to v1.ContainerStateTerminated.Message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Corresponds to v1.ContainerStateTerminated.Reason
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Reason reported by Kubernetes.
	KubernetesReason KubernetesReason `protobuf:"varint,9,opt,name=kubernetes_reason,json=kubernetesReason,proto3,enum=armadaevents.KubernetesReason" json:"kubernetes_reason,omitempty"`
}

func (x *ContainerError) Reset() {
	*x = ContainerError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerError) ProtoMessage() {}

func (x *ContainerError) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerError.ProtoReflect.Descriptor instead.
func (*ContainerError) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{31}
}

func (x *ContainerError) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *ContainerError) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ContainerError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContainerError) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ContainerError) GetKubernetesReason() KubernetesReason {
	if x != nil {
		return x.KubernetesReason
	}
	return KubernetesReason_AppError
}

// Indicates that the pod could not be scheduled for some reason.
type PodLeaseReturned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectMeta   *ObjectMeta `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Message      string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	PodNumber    int32       `protobuf:"varint,3,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
	RunAttempted bool        `protobuf:"varint,4,opt,name=run_attempted,json=runAttempted,proto3" json:"run_attempted,omitempty"`
	DebugMessage string      `protobuf:"bytes,5,opt,name=debugMessage,proto3" json:"debugMessage,omitempty"`
}

func (x *PodLeaseReturned) Reset() {
	*x = PodLeaseReturned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodLeaseReturned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodLeaseReturned) ProtoMessage() {}

func (x *PodLeaseReturned) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodLeaseReturned.ProtoReflect.Descriptor instead.
func (*PodLeaseReturned) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{32}
}

func (x *PodLeaseReturned) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *PodLeaseReturned) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PodLeaseReturned) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

func (x *PodLeaseReturned) GetRunAttempted() bool {
	if x != nil {
		return x.RunAttempted
	}
	return false
}

func (x *PodLeaseReturned) GetDebugMessage() string {
	if x != nil {
		return x.DebugMessage
	}
	return ""
}

// Indicates that the lease on the job that the pod was part of could not be renewed.
// If this happens, the executor deletes the pod and generates a JobRunError with this message as the reason.
type PodTerminated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This ObjectMeta identifies the Pod.
	ObjectMeta *ObjectMeta `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NodeName   string      `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber  int32       `protobuf:"varint,4,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
}

func (x *PodTerminated) Reset() {
	*x = PodTerminated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodTerminated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodTerminated) ProtoMessage() {}

func (x *PodTerminated) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodTerminated.ProtoReflect.Descriptor instead.
func (*PodTerminated) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{33}
}

func (x *PodTerminated) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *PodTerminated) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PodTerminated) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PodTerminated) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

type ExecutorError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecutorError) Reset() {
	*x = ExecutorError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorError) ProtoMessage() {}

func (x *ExecutorError) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorError.ProtoReflect.Descriptor instead.
func (*ExecutorError) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{34}
}

type PodUnschedulable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this ObjectMeta identifies the Pod
	ObjectMeta *ObjectMeta `protobuf:"bytes,1,opt,name=objectMeta,proto3" json:"objectMeta,omitempty"`
	Message    string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	NodeName   string      `protobuf:"bytes,3,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PodNumber  int32       `protobuf:"varint,4,opt,name=pod_number,json=podNumber,proto3" json:"pod_number,omitempty"`
}

func (x *PodUnschedulable) Reset() {
	*x = PodUnschedulable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodUnschedulable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodUnschedulable) ProtoMessage() {}

func (x *PodUnschedulable) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodUnschedulable.ProtoReflect.Descriptor instead.
func (*PodUnschedulable) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{35}
}

func (x *PodUnschedulable) GetObjectMeta() *ObjectMeta {
	if x != nil {
		return x.ObjectMeta
	}
	return nil
}

func (x *PodUnschedulable) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PodUnschedulable) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *PodUnschedulable) GetPodNumber() int32 {
	if x != nil {
		return x.PodNumber
	}
	return 0
}

type LeaseExpired struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeaseExpired) Reset() {
	*x = LeaseExpired{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseExpired) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseExpired) ProtoMessage() {}

func (x *LeaseExpired) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseExpired.ProtoReflect.Descriptor instead.
func (*LeaseExpired) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{36}
}

type MaxRunsExceeded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MaxRunsExceeded) Reset() {
	*x = MaxRunsExceeded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaxRunsExceeded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxRunsExceeded) ProtoMessage() {}

func (x *MaxRunsExceeded) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxRunsExceeded.ProtoReflect.Descriptor instead.
func (*MaxRunsExceeded) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{37}
}

func (x *MaxRunsExceeded) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JobRunPreemptedError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JobRunPreemptedError) Reset() {
	*x = JobRunPreemptedError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunPreemptedError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunPreemptedError) ProtoMessage() {}

func (x *JobRunPreemptedError) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunPreemptedError.ProtoReflect.Descriptor instead.
func (*JobRunPreemptedError) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{38}
}

type GangJobUnschedulable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GangJobUnschedulable) Reset() {
	*x = GangJobUnschedulable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GangJobUnschedulable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GangJobUnschedulable) ProtoMessage() {}

func (x *GangJobUnschedulable) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GangJobUnschedulable.ProtoReflect.Descriptor instead.
func (*GangJobUnschedulable) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{39}
}

func (x *GangJobUnschedulable) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JobRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JobRejected) Reset() {
	*x = JobRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRejected) ProtoMessage() {}

func (x *JobRejected) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRejected.ProtoReflect.Descriptor instead.
func (*JobRejected) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{40}
}

func (x *JobRejected) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Message to indicate that a JobRun has been preempted.
type JobRunPreempted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uuid of the job that was preempted
	PreemptedJobId *Uuid `protobuf:"bytes,1,opt,name=preempted_job_id,json=preemptedJobId,proto3" json:"preempted_job_id,omitempty"`
	// Uuid of the job run that was preempted.
	PreemptedRunId *Uuid `protobuf:"bytes,2,opt,name=preempted_run_id,json=preemptedRunId,proto3" json:"preempted_run_id,omitempty"`
	// Uuid of the job that caused the preemption.
	PreemptiveJobId *Uuid `protobuf:"bytes,3,opt,name=preemptive_job_id,json=preemptiveJobId,proto3" json:"preemptive_job_id,omitempty"`
	// Uuid of the job run that caused the preemption.
	PreemptiveRunId   *Uuid  `protobuf:"bytes,4,opt,name=preemptive_run_id,json=preemptiveRunId,proto3" json:"preemptive_run_id,omitempty"`
	PreemptedJobIdStr string `protobuf:"bytes,5,opt,name=preempted_job_id_str,json=preemptedJobIdStr,proto3" json:"preempted_job_id_str,omitempty"`
	PreemptedRunIdStr string `protobuf:"bytes,6,opt,name=preempted_run_id_str,json=preemptedRunIdStr,proto3" json:"preempted_run_id_str,omitempty"`
}

func (x *JobRunPreempted) Reset() {
	*x = JobRunPreempted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunPreempted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunPreempted) ProtoMessage() {}

func (x *JobRunPreempted) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunPreempted.ProtoReflect.Descriptor instead.
func (*JobRunPreempted) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{41}
}

func (x *JobRunPreempted) GetPreemptedJobId() *Uuid {
	if x != nil {
		return x.PreemptedJobId
	}
	return nil
}

func (x *JobRunPreempted) GetPreemptedRunId() *Uuid {
	if x != nil {
		return x.PreemptedRunId
	}
	return nil
}

func (x *JobRunPreempted) GetPreemptiveJobId() *Uuid {
	if x != nil {
		return x.PreemptiveJobId
	}
	return nil
}

func (x *JobRunPreempted) GetPreemptiveRunId() *Uuid {
	if x != nil {
		return x.PreemptiveRunId
	}
	return nil
}

func (x *JobRunPreempted) GetPreemptedJobIdStr() string {
	if x != nil {
		return x.PreemptedJobIdStr
	}
	return ""
}

func (x *JobRunPreempted) GetPreemptedRunIdStr() string {
	if x != nil {
		return x.PreemptedRunIdStr
	}
	return ""
}

// Message used internally by Armada to see if messages can be propagated through a pulsar partition
type PartitionMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// group id ties together multiple messages across different partitions
	GroupId *Uuid `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The pulsar partition on which this message was sent
	Partition uint32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (x *PartitionMarker) Reset() {
	*x = PartitionMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionMarker) ProtoMessage() {}

func (x *PartitionMarker) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionMarker.ProtoReflect.Descriptor instead.
func (*PartitionMarker) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{42}
}

func (x *PartitionMarker) GetGroupId() *Uuid {
	if x != nil {
		return x.GroupId
	}
	return nil
}

func (x *PartitionMarker) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

// Indicates that the scheduler has requested for the job run to be pre-empted.
type JobRunPreemptionRequested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId    *Uuid  `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId    *Uuid  `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobIdStr string `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr string `protobuf:"bytes,4,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
}

func (x *JobRunPreemptionRequested) Reset() {
	*x = JobRunPreemptionRequested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunPreemptionRequested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunPreemptionRequested) ProtoMessage() {}

func (x *JobRunPreemptionRequested) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunPreemptionRequested.ProtoReflect.Descriptor instead.
func (*JobRunPreemptionRequested) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{43}
}

func (x *JobRunPreemptionRequested) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *JobRunPreemptionRequested) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobRunPreemptionRequested) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *JobRunPreemptionRequested) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

// Indicates that a user has requested for the job to be pre-empted.
type JobPreemptionRequested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    *Uuid  `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobIdStr string `protobuf:"bytes,2,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *JobPreemptionRequested) Reset() {
	*x = JobPreemptionRequested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobPreemptionRequested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobPreemptionRequested) ProtoMessage() {}

func (x *JobPreemptionRequested) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobPreemptionRequested.ProtoReflect.Descriptor instead.
func (*JobPreemptionRequested) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{44}
}

func (x *JobPreemptionRequested) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobPreemptionRequested) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

// Indicates that the scheduler is happy with the job
type JobValidated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    *Uuid    `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Pools    []string `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
	JobIdStr string   `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
}

func (x *JobValidated) Reset() {
	*x = JobValidated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobValidated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobValidated) ProtoMessage() {}

func (x *JobValidated) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobValidated.ProtoReflect.Descriptor instead.
func (*JobValidated) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{45}
}

func (x *JobValidated) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobValidated) GetPools() []string {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *JobValidated) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

// Generated by the scheduler when a job is cancelled, all active job runs are also cancelled
// One such message is generated per job run that was cancelled.
type JobRunCancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId    *Uuid  `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	JobId    *Uuid  `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobIdStr string `protobuf:"bytes,3,opt,name=job_id_str,json=jobIdStr,proto3" json:"job_id_str,omitempty"`
	RunIdStr string `protobuf:"bytes,4,opt,name=run_id_str,json=runIdStr,proto3" json:"run_id_str,omitempty"`
}

func (x *JobRunCancelled) Reset() {
	*x = JobRunCancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobRunCancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobRunCancelled) ProtoMessage() {}

func (x *JobRunCancelled) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobRunCancelled.ProtoReflect.Descriptor instead.
func (*JobRunCancelled) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{46}
}

func (x *JobRunCancelled) GetRunId() *Uuid {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *JobRunCancelled) GetJobId() *Uuid {
	if x != nil {
		return x.JobId
	}
	return nil
}

func (x *JobRunCancelled) GetJobIdStr() string {
	if x != nil {
		return x.JobIdStr
	}
	return ""
}

func (x *JobRunCancelled) GetRunIdStr() string {
	if x != nil {
		return x.RunIdStr
	}
	return ""
}

// List of possible events, i.e., state transitions.
type EventSequence_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created,proto3" json:"created,omitempty"`
	// Types that are assignable to Event:
	//
	//	*EventSequence_Event_SubmitJob
	//	*EventSequence_Event_ReprioritiseJob
	//	*EventSequence_Event_ReprioritiseJobSet
	//	*EventSequence_Event_ReprioritisedJob
	//	*EventSequence_Event_CancelJob
	//	*EventSequence_Event_CancelJobSet
	//	*EventSequence_Event_CancelledJob
	//	*EventSequence_Event_JobSucceeded
	//	*EventSequence_Event_JobErrors
	//	*EventSequence_Event_JobRunLeased
	//	*EventSequence_Event_JobRunAssigned
	//	*EventSequence_Event_JobRunRunning
	//	*EventSequence_Event_JobRunSucceeded
	//	*EventSequence_Event_JobRunErrors
	//	*EventSequence_Event_StandaloneIngressInfo
	//	*EventSequence_Event_ResourceUtilisation
	//	*EventSequence_Event_JobRunPreempted
	//	*EventSequence_Event_PartitionMarker
	//	*EventSequence_Event_JobRunPreemptionRequested
	//	*EventSequence_Event_JobRequeued
	//	*EventSequence_Event_JobPreemptionRequested
	//	*EventSequence_Event_JobRunCancelled
	//	*EventSequence_Event_JobValidated
	Event isEventSequence_Event_Event `protobuf_oneof:"event"`
}

func (x *EventSequence_Event) Reset() {
	*x = EventSequence_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_armadaevents_events_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSequence_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSequence_Event) ProtoMessage() {}

func (x *EventSequence_Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_armadaevents_events_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSequence_Event.ProtoReflect.Descriptor instead.
func (*EventSequence_Event) Descriptor() ([]byte, []int) {
	return file_pkg_armadaevents_events_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EventSequence_Event) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (m *EventSequence_Event) GetEvent() isEventSequence_Event_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *EventSequence_Event) GetSubmitJob() *SubmitJob {
	if x, ok := x.GetEvent().(*EventSequence_Event_SubmitJob); ok {
		return x.SubmitJob
	}
	return nil
}

func (x *EventSequence_Event) GetReprioritiseJob() *ReprioritiseJob {
	if x, ok := x.GetEvent().(*EventSequence_Event_ReprioritiseJob); ok {
		return x.ReprioritiseJob
	}
	return nil
}

func (x *EventSequence_Event) GetReprioritiseJobSet() *ReprioritiseJobSet {
	if x, ok := x.GetEvent().(*EventSequence_Event_ReprioritiseJobSet); ok {
		return x.ReprioritiseJobSet
	}
	return nil
}

func (x *EventSequence_Event) GetReprioritisedJob() *ReprioritisedJob {
	if x, ok := x.GetEvent().(*EventSequence_Event_ReprioritisedJob); ok {
		return x.ReprioritisedJob
	}
	return nil
}

func (x *EventSequence_Event) GetCancelJob() *CancelJob {
	if x, ok := x.GetEvent().(*EventSequence_Event_CancelJob); ok {
		return x.CancelJob
	}
	return nil
}

func (x *EventSequence_Event) GetCancelJobSet() *CancelJobSet {
	if x, ok := x.GetEvent().(*EventSequence_Event_CancelJobSet); ok {
		return x.CancelJobSet
	}
	return nil
}

func (x *EventSequence_Event) GetCancelledJob() *CancelledJob {
	if x, ok := x.GetEvent().(*EventSequence_Event_CancelledJob); ok {
		return x.CancelledJob
	}
	return nil
}

func (x *EventSequence_Event) GetJobSucceeded() *JobSucceeded {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobSucceeded); ok {
		return x.JobSucceeded
	}
	return nil
}

func (x *EventSequence_Event) GetJobErrors() *JobErrors {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobErrors); ok {
		return x.JobErrors
	}
	return nil
}

func (x *EventSequence_Event) GetJobRunLeased() *JobRunLeased {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRunLeased); ok {
		return x.JobRunLeased
	}
	return nil
}

func (x *EventSequence_Event) GetJobRunAssigned() *JobRunAssigned {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRunAssigned); ok {
		return x.JobRunAssigned
	}
	return nil
}

func (x *EventSequence_Event) GetJobRunRunning() *JobRunRunning {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRunRunning); ok {
		return x.JobRunRunning
	}
	return nil
}

func (x *EventSequence_Event) GetJobRunSucceeded() *JobRunSucceeded {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRunSucceeded); ok {
		return x.JobRunSucceeded
	}
	return nil
}

func (x *EventSequence_Event) GetJobRunErrors() *JobRunErrors {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRunErrors); ok {
		return x.JobRunErrors
	}
	return nil
}

func (x *EventSequence_Event) GetStandaloneIngressInfo() *StandaloneIngressInfo {
	if x, ok := x.GetEvent().(*EventSequence_Event_StandaloneIngressInfo); ok {
		return x.StandaloneIngressInfo
	}
	return nil
}

func (x *EventSequence_Event) GetResourceUtilisation() *ResourceUtilisation {
	if x, ok := x.GetEvent().(*EventSequence_Event_ResourceUtilisation); ok {
		return x.ResourceUtilisation
	}
	return nil
}

func (x *EventSequence_Event) GetJobRunPreempted() *JobRunPreempted {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRunPreempted); ok {
		return x.JobRunPreempted
	}
	return nil
}

func (x *EventSequence_Event) GetPartitionMarker() *PartitionMarker {
	if x, ok := x.GetEvent().(*EventSequence_Event_PartitionMarker); ok {
		return x.PartitionMarker
	}
	return nil
}

func (x *EventSequence_Event) GetJobRunPreemptionRequested() *JobRunPreemptionRequested {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRunPreemptionRequested); ok {
		return x.JobRunPreemptionRequested
	}
	return nil
}

func (x *EventSequence_Event) GetJobRequeued() *JobRequeued {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRequeued); ok {
		return x.JobRequeued
	}
	return nil
}

func (x *EventSequence_Event) GetJobPreemptionRequested() *JobPreemptionRequested {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobPreemptionRequested); ok {
		return x.JobPreemptionRequested
	}
	return nil
}

func (x *EventSequence_Event) GetJobRunCancelled() *JobRunCancelled {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobRunCancelled); ok {
		return x.JobRunCancelled
	}
	return nil
}

func (x *EventSequence_Event) GetJobValidated() *JobValidated {
	if x, ok := x.GetEvent().(*EventSequence_Event_JobValidated); ok {
		return x.JobValidated
	}
	return nil
}

type isEventSequence_Event_Event interface {
	isEventSequence_Event_Event()
}

type EventSequence_Event_SubmitJob struct {
	SubmitJob *SubmitJob `protobuf:"bytes,1,opt,name=submitJob,proto3,oneof"`
}

type EventSequence_Event_ReprioritiseJob struct {
	ReprioritiseJob *ReprioritiseJob `protobuf:"bytes,2,opt,name=reprioritiseJob,proto3,oneof"`
}

type EventSequence_Event_ReprioritiseJobSet struct {
	ReprioritiseJobSet *ReprioritiseJobSet `protobuf:"bytes,3,opt,name=reprioritiseJobSet,proto3,oneof"`
}

type EventSequence_Event_ReprioritisedJob struct {
	ReprioritisedJob *ReprioritisedJob `protobuf:"bytes,4,opt,name=reprioritisedJob,proto3,oneof"`
}

type EventSequence_Event_CancelJob struct {
	CancelJob *CancelJob `protobuf:"bytes,5,opt,name=cancelJob,proto3,oneof"`
}

type EventSequence_Event_CancelJobSet struct {
	CancelJobSet *CancelJobSet `protobuf:"bytes,6,opt,name=cancelJobSet,proto3,oneof"`
}

type EventSequence_Event_CancelledJob struct {
	CancelledJob *CancelledJob `protobuf:"bytes,7,opt,name=cancelledJob,proto3,oneof"`
}

type EventSequence_Event_JobSucceeded struct {
	JobSucceeded *JobSucceeded `protobuf:"bytes,8,opt,name=jobSucceeded,proto3,oneof"`
}

type EventSequence_Event_JobErrors struct {
	JobErrors *JobErrors `protobuf:"bytes,9,opt,name=jobErrors,proto3,oneof"`
}

type EventSequence_Event_JobRunLeased struct {
	JobRunLeased *JobRunLeased `protobuf:"bytes,10,opt,name=jobRunLeased,proto3,oneof"`
}

type EventSequence_Event_JobRunAssigned struct {
	JobRunAssigned *JobRunAssigned `protobuf:"bytes,11,opt,name=jobRunAssigned,proto3,oneof"`
}

type EventSequence_Event_JobRunRunning struct {
	JobRunRunning *JobRunRunning `protobuf:"bytes,12,opt,name=jobRunRunning,proto3,oneof"`
}

type EventSequence_Event_JobRunSucceeded struct {
	JobRunSucceeded *JobRunSucceeded `protobuf:"bytes,13,opt,name=jobRunSucceeded,proto3,oneof"`
}

type EventSequence_Event_JobRunErrors struct {
	JobRunErrors *JobRunErrors `protobuf:"bytes,14,opt,name=jobRunErrors,proto3,oneof"`
}

type EventSequence_Event_StandaloneIngressInfo struct {
	StandaloneIngressInfo *StandaloneIngressInfo `protobuf:"bytes,16,opt,name=standaloneIngressInfo,proto3,oneof"`
}

type EventSequence_Event_ResourceUtilisation struct {
	ResourceUtilisation *ResourceUtilisation `protobuf:"bytes,17,opt,name=resourceUtilisation,proto3,oneof"`
}

type EventSequence_Event_JobRunPreempted struct {
	JobRunPreempted *JobRunPreempted `protobuf:"bytes,19,opt,name=jobRunPreempted,proto3,oneof"`
}

type EventSequence_Event_PartitionMarker struct {
	PartitionMarker *PartitionMarker `protobuf:"bytes,20,opt,name=partitionMarker,proto3,oneof"`
}

type EventSequence_Event_JobRunPreemptionRequested struct {
	JobRunPreemptionRequested *JobRunPreemptionRequested `protobuf:"bytes,21,opt,name=jobRunPreemptionRequested,proto3,oneof"`
}

type EventSequence_Event_JobRequeued struct {
	JobRequeued *JobRequeued `protobuf:"bytes,22,opt,name=jobRequeued,proto3,oneof"`
}

type EventSequence_Event_JobPreemptionRequested struct {
	JobPreemptionRequested *JobPreemptionRequested `protobuf:"bytes,23,opt,name=jobPreemptionRequested,proto3,oneof"`
}

type EventSequence_Event_JobRunCancelled struct {
	JobRunCancelled *JobRunCancelled `protobuf:"bytes,24,opt,name=jobRunCancelled,proto3,oneof"`
}

type EventSequence_Event_JobValidated struct {
	JobValidated *JobValidated `protobuf:"bytes,25,opt,name=jobValidated,proto3,oneof"`
}

func (*EventSequence_Event_SubmitJob) isEventSequence_Event_Event() {}

func (*EventSequence_Event_ReprioritiseJob) isEventSequence_Event_Event() {}

func (*EventSequence_Event_ReprioritiseJobSet) isEventSequence_Event_Event() {}

func (*EventSequence_Event_ReprioritisedJob) isEventSequence_Event_Event() {}

func (*EventSequence_Event_CancelJob) isEventSequence_Event_Event() {}

func (*EventSequence_Event_CancelJobSet) isEventSequence_Event_Event() {}

func (*EventSequence_Event_CancelledJob) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobSucceeded) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobErrors) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRunLeased) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRunAssigned) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRunRunning) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRunSucceeded) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRunErrors) isEventSequence_Event_Event() {}

func (*EventSequence_Event_StandaloneIngressInfo) isEventSequence_Event_Event() {}

func (*EventSequence_Event_ResourceUtilisation) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRunPreempted) isEventSequence_Event_Event() {}

func (*EventSequence_Event_PartitionMarker) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRunPreemptionRequested) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRequeued) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobPreemptionRequested) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobRunCancelled) isEventSequence_Event_Event() {}

func (*EventSequence_Event_JobValidated) isEventSequence_Event_Event() {}

var File_pkg_armadaevents_events_proto protoreflect.FileDescriptor

var file_pkg_armadaevents_events_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x22, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x34, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x95, 0x0f, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x39,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xdf, 0x0d, 0x0a, 0x05, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a,
	0x6f, 0x62, 0x12, 0x49, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69,
	0x73, 0x65, 0x4a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72,
	0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x52, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x4a, 0x6f, 0x62,
	0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x6d, 0x61,
	0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x12, 0x72,
	0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x12, 0x4c, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x73,
	0x65, 0x64, 0x4a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72,
	0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x10, 0x72,
	0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x12,
	0x37, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x0c,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x40, 0x0a, 0x0c,
	0x6a, 0x6f, 0x62, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x37,
	0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x6f,
	0x62, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x52, 0x75,
	0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x6a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0f, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0f, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e,
	0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x6c, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x55, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0f, 0x6a, 0x6f, 0x62, 0x52, 0x75,
	0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0f, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72,
	0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x67, 0x0a,
	0x19, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x19, 0x6a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72,
	0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x16, 0x6a, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x16, 0x6a,
	0x6f, 0x62, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0f, 0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x05, 0x0a, 0x13,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x75, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x74,
	0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x71, 0x0a, 0x16, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x72,
	0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x0a,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x78, 0x0a, 0x1a, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x77, 0x0a, 0x19, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x6b, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x67, 0x68, 0x36, 0x34, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x68, 0x69, 0x67, 0x68, 0x36, 0x34, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x6f, 0x77, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x6c, 0x6f,
	0x77, 0x36, 0x34, 0x22, 0x9b, 0x04, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f,
	0x62, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x42, 0x0a,
	0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x38, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c,
	0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x4d, 0x6f, 0x73,
	0x74, 0x4f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x74, 0x4d,
	0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x61, 0x66, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x61, 0x66, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74,
	0x72, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x4d, 0x61, 0x69, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x22, 0x97, 0x03, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x6d, 0x61,
	0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x3f, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x57, 0x69, 0x74, 0x68, 0x41, 0x76, 0x6f, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x41, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d,
	0x61, 0x70, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x61, 0x70, 0x12,
	0x3f, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x57, 0x69, 0x74, 0x68, 0x41, 0x76, 0x6f, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63,
	0x42, 0x08, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x0a, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49,
	0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x75, 0x0a, 0x14, 0x50, 0x6f, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x57, 0x69, 0x74, 0x68, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07,
	0x70, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x76, 0x6f, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x76,
	0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x57, 0x69, 0x74, 0x68, 0x41, 0x76, 0x6f,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x38, 0x73, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x76, 0x6f,
	0x69, 0x64, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61,
	0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0xda,
	0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x30, 0x0a, 0x12, 0x52,
	0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x4a, 0x6f, 0x62, 0x53, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x77, 0x0a,
	0x10, 0x52, 0x65, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x73, 0x65, 0x64, 0x4a, 0x6f,
	0x62, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x6c, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4a, 0x6f, 0x62, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x53, 0x74, 0x72, 0x22, 0x3e, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f,
	0x62, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x0c,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x29, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0xa3, 0x01,
	0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x53, 0x74, 0x72, 0x22, 0xf6, 0x03, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68,
	0x61, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x41,
	0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x18, 0x70, 0x6f, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x16,
	0x70, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xee, 0x01, 0x0a,
	0x0e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d,
	0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x1c, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0xed, 0x01,
	0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d,
	0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x1c, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0xcc, 0x01,
	0x0a, 0x16, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x6d,
	0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x07,
	0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x72,
	0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x43,
	0x0a, 0x15, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x8c, 0x04, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f,
	0x6e, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a,
	0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69,
	0x64, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x66, 0x0a,
	0x11, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x6f,
	0x6e, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x1c, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x1a, 0x43, 0x0a,
	0x15, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x53, 0x74, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x0c, 0x4a, 0x6f, 0x62,
	0x52, 0x75, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61,
	0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x72,
	0x75, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x0a,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x9c, 0x07, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x49,
	0x0a, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x43, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x6f, 0x64, 0x55, 0x6e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x6f, 0x64, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x64, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x72, 0x6d,
	0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x75, 0x6e,
	0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d,
	0x61, 0x78, 0x52, 0x75, 0x6e, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x75, 0x6e, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x6f, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x6f, 0x64, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x6f, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61,
	0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6f, 0x64, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x64,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x14, 0x6a, 0x6f,
	0x62, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x50, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x14,
	0x6a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x14, 0x67, 0x61, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x55,
	0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x47, 0x61, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x61, 0x6e, 0x67, 0x4a, 0x6f,
	0x62, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d,
	0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x0f, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x08, 0x50, 0x6f, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x6d,
	0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x75, 0x6e,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x75, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x55, 0x6e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6f, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x4d, 0x61,
	0x78, 0x52, 0x75, 0x6e, 0x73, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x52, 0x75,
	0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x30, 0x0a, 0x14, 0x47, 0x61, 0x6e, 0x67, 0x4a, 0x6f, 0x62, 0x55, 0x6e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x27, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x0f, 0x4a,
	0x6f, 0x62, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x10, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x65,
	0x6d, 0x70, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x11, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70,
	0x74, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x65, 0x65, 0x6d,
	0x70, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x5e, 0x0a, 0x0f,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a,
	0x19, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x75,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d,
	0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1c,
	0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0x61, 0x0a, 0x16,
	0x4a, 0x6f, 0x62, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22,
	0x6d, 0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x22, 0xa3,
	0x01, 0x0a, 0x0f, 0x4a, 0x6f, 0x62, 0x52, 0x75, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x75, 0x69,
	0x64, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x53, 0x74, 0x72, 0x2a, 0x30, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x76, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x10, 0x03, 0x42, 0x52, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2f, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x72, 0x6d, 0x61,
	0x64, 0x61, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0xaa, 0x02, 0x1d, 0x41, 0x72, 0x6d, 0x61, 0x64,
	0x61, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6f, 0x2e, 0x41, 0x72, 0x6d, 0x61,
	0x64, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_armadaevents_events_proto_rawDescOnce sync.Once
	file_pkg_armadaevents_events_proto_rawDescData = file_pkg_armadaevents_events_proto_rawDesc
)

func file_pkg_armadaevents_events_proto_rawDescGZIP() []byte {
	file_pkg_armadaevents_events_proto_rawDescOnce.Do(func() {
		file_pkg_armadaevents_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_armadaevents_events_proto_rawDescData)
	})
	return file_pkg_armadaevents_events_proto_rawDescData
}

var file_pkg_armadaevents_events_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_armadaevents_events_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_pkg_armadaevents_events_proto_goTypes = []any{
	(JobState)(0),                              // 0: armadaevents.JobState
	(KubernetesReason)(0),                      // 1: armadaevents.KubernetesReason
	(*EventSequence)(nil),                      // 2: armadaevents.EventSequence
	(*ResourceUtilisation)(nil),                // 3: armadaevents.ResourceUtilisation
	(*Uuid)(nil),                               // 4: armadaevents.Uuid
	(*SubmitJob)(nil),                          // 5: armadaevents.SubmitJob
	(*KubernetesMainObject)(nil),               // 6: armadaevents.KubernetesMainObject
	(*KubernetesObject)(nil),                   // 7: armadaevents.KubernetesObject
	(*ObjectMeta)(nil),                         // 8: armadaevents.ObjectMeta
	(*PodSpecWithAvoidList)(nil),               // 9: armadaevents.PodSpecWithAvoidList
	(*JobSpecWithAvoidList)(nil),               // 10: armadaevents.JobSpecWithAvoidList
	(*ReprioritiseJob)(nil),                    // 11: armadaevents.ReprioritiseJob
	(*JobRequeued)(nil),                        // 12: armadaevents.JobRequeued
	(*ReprioritiseJobSet)(nil),                 // 13: armadaevents.ReprioritiseJobSet
	(*ReprioritisedJob)(nil),                   // 14: armadaevents.ReprioritisedJob
	(*CancelJob)(nil),                          // 15: armadaevents.CancelJob
	(*JobSetFilter)(nil),                       // 16: armadaevents.JobSetFilter
	(*CancelJobSet)(nil),                       // 17: armadaevents.CancelJobSet
	(*CancelledJob)(nil),                       // 18: armadaevents.CancelledJob
	(*JobSucceeded)(nil),                       // 19: armadaevents.JobSucceeded
	(*JobRunLeased)(nil),                       // 20: armadaevents.JobRunLeased
	(*JobRunAssigned)(nil),                     // 21: armadaevents.JobRunAssigned
	(*JobRunRunning)(nil),                      // 22: armadaevents.JobRunRunning
	(*KubernetesResourceInfo)(nil),             // 23: armadaevents.KubernetesResourceInfo
	(*PodInfo)(nil),                            // 24: armadaevents.PodInfo
	(*IngressInfo)(nil),                        // 25: armadaevents.IngressInfo
	(*StandaloneIngressInfo)(nil),              // 26: armadaevents.StandaloneIngressInfo
	(*JobRunSucceeded)(nil),                    // 27: armadaevents.JobRunSucceeded
	(*JobErrors)(nil),                          // 28: armadaevents.JobErrors
	(*JobRunErrors)(nil),                       // 29: armadaevents.JobRunErrors
	(*Error)(nil),                              // 30: armadaevents.Error
	(*KubernetesError)(nil),                    // 31: armadaevents.KubernetesError
	(*PodError)(nil),                           // 32: armadaevents.PodError
	(*ContainerError)(nil),                     // 33: armadaevents.ContainerError
	(*PodLeaseReturned)(nil),                   // 34: armadaevents.PodLeaseReturned
	(*PodTerminated)(nil),                      // 35: armadaevents.PodTerminated
	(*ExecutorError)(nil),                      // 36: armadaevents.ExecutorError
	(*PodUnschedulable)(nil),                   // 37: armadaevents.PodUnschedulable
	(*LeaseExpired)(nil),                       // 38: armadaevents.LeaseExpired
	(*MaxRunsExceeded)(nil),                    // 39: armadaevents.MaxRunsExceeded
	(*JobRunPreemptedError)(nil),               // 40: armadaevents.JobRunPreemptedError
	(*GangJobUnschedulable)(nil),               // 41: armadaevents.GangJobUnschedulable
	(*JobRejected)(nil),                        // 42: armadaevents.JobRejected
	(*JobRunPreempted)(nil),                    // 43: armadaevents.JobRunPreempted
	(*PartitionMarker)(nil),                    // 44: armadaevents.PartitionMarker
	(*JobRunPreemptionRequested)(nil),          // 45: armadaevents.JobRunPreemptionRequested
	(*JobPreemptionRequested)(nil),             // 46: armadaevents.JobPreemptionRequested
	(*JobValidated)(nil),                       // 47: armadaevents.JobValidated
	(*JobRunCancelled)(nil),                    // 48: armadaevents.JobRunCancelled
	(*EventSequence_Event)(nil),                // 49: armadaevents.EventSequence.Event
	nil,                                        // 50: armadaevents.ResourceUtilisation.MaxResourcesForPeriodEntry
	nil,                                        // 51: armadaevents.ResourceUtilisation.TotalCumulativeUsageEntry
	nil,                                        // 52: armadaevents.ObjectMeta.AnnotationsEntry
	nil,                                        // 53: armadaevents.ObjectMeta.LabelsEntry
	nil,                                        // 54: armadaevents.IngressInfo.IngressAddressesEntry
	nil,                                        // 55: armadaevents.StandaloneIngressInfo.IngressAddressesEntry
	(*v1.IngressSpec)(nil),                     // 56: k8s.io.api.networking.v1.IngressSpec
	(*v11.ServiceSpec)(nil),                    // 57: k8s.io.api.core.v1.ServiceSpec
	(*v11.ConfigMap)(nil),                      // 58: k8s.io.api.core.v1.ConfigMap
	(*v11.PodSpec)(nil),                        // 59: k8s.io.api.core.v1.PodSpec
	(*v12.JobSpec)(nil),                        // 60: k8s.io.api.batch.v1.JobSpec
	(*schedulerobjects.JobSchedulingInfo)(nil), // 61: schedulerobjects.JobSchedulingInfo
	(*schedulerobjects.PodRequirements)(nil),   // 62: schedulerobjects.PodRequirements
	(*timestamppb.Timestamp)(nil),              // 63: google.protobuf.Timestamp
	(*resource.Quantity)(nil),                  // 64: k8s.io.apimachinery.pkg.api.resource.Quantity
}
var file_pkg_armadaevents_events_proto_depIdxs = []int32{
	49,  // 0: armadaevents.EventSequence.events:type_name -> armadaevents.EventSequence.Event
	4,   // 1: armadaevents.ResourceUtilisation.run_id:type_name -> armadaevents.Uuid
	4,   // 2: armadaevents.ResourceUtilisation.job_id:type_name -> armadaevents.Uuid
	23,  // 3: armadaevents.ResourceUtilisation.resource_info:type_name -> armadaevents.KubernetesResourceInfo
	50,  // 4: armadaevents.ResourceUtilisation.max_resources_for_period:type_name -> armadaevents.ResourceUtilisation.MaxResourcesForPeriodEntry
	51,  // 5: armadaevents.ResourceUtilisation.total_cumulative_usage:type_name -> armadaevents.ResourceUtilisation.TotalCumulativeUsageEntry
	4,   // 6: armadaevents.SubmitJob.job_id:type_name -> armadaevents.Uuid
	8,   // 7: armadaevents.SubmitJob.objectMeta:type_name -> armadaevents.ObjectMeta
	6,   // 8: armadaevents.SubmitJob.mainObject:type_name -> armadaevents.KubernetesMainObject
	7,   // 9: armadaevents.SubmitJob.objects:type_name -> armadaevents.KubernetesObject
	8,   // 10: armadaevents.KubernetesMainObject.objectMeta:type_name -> armadaevents.ObjectMeta
	9,   // 11: armadaevents.KubernetesMainObject.pod_spec:type_name -> armadaevents.PodSpecWithAvoidList
	10,  // 12: armadaevents.KubernetesMainObject.job_spec:type_name -> armadaevents.JobSpecWithAvoidList
	8,   // 13: armadaevents.KubernetesObject.objectMeta:type_name -> armadaevents.ObjectMeta
	9,   // 14: armadaevents.KubernetesObject.pod_spec:type_name -> armadaevents.PodSpecWithAvoidList
	56,  // 15: armadaevents.KubernetesObject.ingress:type_name -> k8s.io.api.networking.v1.IngressSpec
	57,  // 16: armadaevents.KubernetesObject.service:type_name -> k8s.io.api.core.v1.ServiceSpec
	58,  // 17: armadaevents.KubernetesObject.configMap:type_name -> k8s.io.api.core.v1.ConfigMap
	10,  // 18: armadaevents.KubernetesObject.job_spec:type_name -> armadaevents.JobSpecWithAvoidList
	52,  // 19: armadaevents.ObjectMeta.annotations:type_name -> armadaevents.ObjectMeta.AnnotationsEntry
	53,  // 20: armadaevents.ObjectMeta.labels:type_name -> armadaevents.ObjectMeta.LabelsEntry
	59,  // 21: armadaevents.PodSpecWithAvoidList.pod_spec:type_name -> k8s.io.api.core.v1.PodSpec
	60,  // 22: armadaevents.JobSpecWithAvoidList.job_spec:type_name -> k8s.io.api.batch.v1.JobSpec
	4,   // 23: armadaevents.ReprioritiseJob.job_id:type_name -> armadaevents.Uuid
	4,   // 24: armadaevents.JobRequeued.job_id:type_name -> armadaevents.Uuid
	61,  // 25: armadaevents.JobRequeued.scheduling_info:type_name -> schedulerobjects.JobSchedulingInfo
	4,   // 26: armadaevents.ReprioritisedJob.job_id:type_name -> armadaevents.Uuid
	4,   // 27: armadaevents.CancelJob.job_id:type_name -> armadaevents.Uuid
	0,   // 28: armadaevents.JobSetFilter.states:type_name -> armadaevents.JobState
	0,   // 29: armadaevents.CancelJobSet.states:type_name -> armadaevents.JobState
	4,   // 30: armadaevents.CancelledJob.job_id:type_name -> armadaevents.Uuid
	4,   // 31: armadaevents.JobSucceeded.job_id:type_name -> armadaevents.Uuid
	23,  // 32: armadaevents.JobSucceeded.resourceInfos:type_name -> armadaevents.KubernetesResourceInfo
	4,   // 33: armadaevents.JobRunLeased.run_id:type_name -> armadaevents.Uuid
	4,   // 34: armadaevents.JobRunLeased.job_id:type_name -> armadaevents.Uuid
	62,  // 35: armadaevents.JobRunLeased.pod_requirements_overlay:type_name -> schedulerobjects.PodRequirements
	4,   // 36: armadaevents.JobRunAssigned.run_id:type_name -> armadaevents.Uuid
	4,   // 37: armadaevents.JobRunAssigned.job_id:type_name -> armadaevents.Uuid
	23,  // 38: armadaevents.JobRunAssigned.resourceInfos:type_name -> armadaevents.KubernetesResourceInfo
	4,   // 39: armadaevents.JobRunRunning.run_id:type_name -> armadaevents.Uuid
	4,   // 40: armadaevents.JobRunRunning.job_id:type_name -> armadaevents.Uuid
	23,  // 41: armadaevents.JobRunRunning.resourceInfos:type_name -> armadaevents.KubernetesResourceInfo
	8,   // 42: armadaevents.KubernetesResourceInfo.objectMeta:type_name -> armadaevents.ObjectMeta
	24,  // 43: armadaevents.KubernetesResourceInfo.podInfo:type_name -> armadaevents.PodInfo
	25,  // 44: armadaevents.KubernetesResourceInfo.ingressInfo:type_name -> armadaevents.IngressInfo
	54,  // 45: armadaevents.IngressInfo.ingress_addresses:type_name -> armadaevents.IngressInfo.IngressAddressesEntry
	4,   // 46: armadaevents.StandaloneIngressInfo.run_id:type_name -> armadaevents.Uuid
	4,   // 47: armadaevents.StandaloneIngressInfo.job_id:type_name -> armadaevents.Uuid
	8,   // 48: armadaevents.StandaloneIngressInfo.objectMeta:type_name -> armadaevents.ObjectMeta
	55,  // 49: armadaevents.StandaloneIngressInfo.ingress_addresses:type_name -> armadaevents.StandaloneIngressInfo.IngressAddressesEntry
	4,   // 50: armadaevents.JobRunSucceeded.run_id:type_name -> armadaevents.Uuid
	4,   // 51: armadaevents.JobRunSucceeded.job_id:type_name -> armadaevents.Uuid
	23,  // 52: armadaevents.JobRunSucceeded.resourceInfos:type_name -> armadaevents.KubernetesResourceInfo
	4,   // 53: armadaevents.JobErrors.job_id:type_name -> armadaevents.Uuid
	30,  // 54: armadaevents.JobErrors.errors:type_name -> armadaevents.Error
	4,   // 55: armadaevents.JobRunErrors.run_id:type_name -> armadaevents.Uuid
	4,   // 56: armadaevents.JobRunErrors.job_id:type_name -> armadaevents.Uuid
	30,  // 57: armadaevents.JobRunErrors.errors:type_name -> armadaevents.Error
	31,  // 58: armadaevents.Error.kubernetesError:type_name -> armadaevents.KubernetesError
	33,  // 59: armadaevents.Error.containerError:type_name -> armadaevents.ContainerError
	36,  // 60: armadaevents.Error.executorError:type_name -> armadaevents.ExecutorError
	37,  // 61: armadaevents.Error.podUnschedulable:type_name -> armadaevents.PodUnschedulable
	38,  // 62: armadaevents.Error.leaseExpired:type_name -> armadaevents.LeaseExpired
	39,  // 63: armadaevents.Error.maxRunsExceeded:type_name -> armadaevents.MaxRunsExceeded
	32,  // 64: armadaevents.Error.podError:type_name -> armadaevents.PodError
	34,  // 65: armadaevents.Error.podLeaseReturned:type_name -> armadaevents.PodLeaseReturned
	35,  // 66: armadaevents.Error.podTerminated:type_name -> armadaevents.PodTerminated
	40,  // 67: armadaevents.Error.jobRunPreemptedError:type_name -> armadaevents.JobRunPreemptedError
	41,  // 68: armadaevents.Error.gangJobUnschedulable:type_name -> armadaevents.GangJobUnschedulable
	42,  // 69: armadaevents.Error.jobRejected:type_name -> armadaevents.JobRejected
	4,   // 70: armadaevents.KubernetesError.resourceId:type_name -> armadaevents.Uuid
	8,   // 71: armadaevents.PodError.objectMeta:type_name -> armadaevents.ObjectMeta
	33,  // 72: armadaevents.PodError.containerErrors:type_name -> armadaevents.ContainerError
	1,   // 73: armadaevents.PodError.kubernetes_reason:type_name -> armadaevents.KubernetesReason
	8,   // 74: armadaevents.ContainerError.objectMeta:type_name -> armadaevents.ObjectMeta
	1,   // 75: armadaevents.ContainerError.kubernetes_reason:type_name -> armadaevents.KubernetesReason
	8,   // 76: armadaevents.PodLeaseReturned.objectMeta:type_name -> armadaevents.ObjectMeta
	8,   // 77: armadaevents.PodTerminated.objectMeta:type_name -> armadaevents.ObjectMeta
	8,   // 78: armadaevents.PodUnschedulable.objectMeta:type_name -> armadaevents.ObjectMeta
	4,   // 79: armadaevents.JobRunPreempted.preempted_job_id:type_name -> armadaevents.Uuid
	4,   // 80: armadaevents.JobRunPreempted.preempted_run_id:type_name -> armadaevents.Uuid
	4,   // 81: armadaevents.JobRunPreempted.preemptive_job_id:type_name -> armadaevents.Uuid
	4,   // 82: armadaevents.JobRunPreempted.preemptive_run_id:type_name -> armadaevents.Uuid
	4,   // 83: armadaevents.PartitionMarker.group_id:type_name -> armadaevents.Uuid
	4,   // 84: armadaevents.JobRunPreemptionRequested.run_id:type_name -> armadaevents.Uuid
	4,   // 85: armadaevents.JobRunPreemptionRequested.job_id:type_name -> armadaevents.Uuid
	4,   // 86: armadaevents.JobPreemptionRequested.job_id:type_name -> armadaevents.Uuid
	4,   // 87: armadaevents.JobValidated.job_id:type_name -> armadaevents.Uuid
	4,   // 88: armadaevents.JobRunCancelled.run_id:type_name -> armadaevents.Uuid
	4,   // 89: armadaevents.JobRunCancelled.job_id:type_name -> armadaevents.Uuid
	63,  // 90: armadaevents.EventSequence.Event.created:type_name -> google.protobuf.Timestamp
	5,   // 91: armadaevents.EventSequence.Event.submitJob:type_name -> armadaevents.SubmitJob
	11,  // 92: armadaevents.EventSequence.Event.reprioritiseJob:type_name -> armadaevents.ReprioritiseJob
	13,  // 93: armadaevents.EventSequence.Event.reprioritiseJobSet:type_name -> armadaevents.ReprioritiseJobSet
	14,  // 94: armadaevents.EventSequence.Event.reprioritisedJob:type_name -> armadaevents.ReprioritisedJob
	15,  // 95: armadaevents.EventSequence.Event.cancelJob:type_name -> armadaevents.CancelJob
	17,  // 96: armadaevents.EventSequence.Event.cancelJobSet:type_name -> armadaevents.CancelJobSet
	18,  // 97: armadaevents.EventSequence.Event.cancelledJob:type_name -> armadaevents.CancelledJob
	19,  // 98: armadaevents.EventSequence.Event.jobSucceeded:type_name -> armadaevents.JobSucceeded
	28,  // 99: armadaevents.EventSequence.Event.jobErrors:type_name -> armadaevents.JobErrors
	20,  // 100: armadaevents.EventSequence.Event.jobRunLeased:type_name -> armadaevents.JobRunLeased
	21,  // 101: armadaevents.EventSequence.Event.jobRunAssigned:type_name -> armadaevents.JobRunAssigned
	22,  // 102: armadaevents.EventSequence.Event.jobRunRunning:type_name -> armadaevents.JobRunRunning
	27,  // 103: armadaevents.EventSequence.Event.jobRunSucceeded:type_name -> armadaevents.JobRunSucceeded
	29,  // 104: armadaevents.EventSequence.Event.jobRunErrors:type_name -> armadaevents.JobRunErrors
	26,  // 105: armadaevents.EventSequence.Event.standaloneIngressInfo:type_name -> armadaevents.StandaloneIngressInfo
	3,   // 106: armadaevents.EventSequence.Event.resourceUtilisation:type_name -> armadaevents.ResourceUtilisation
	43,  // 107: armadaevents.EventSequence.Event.jobRunPreempted:type_name -> armadaevents.JobRunPreempted
	44,  // 108: armadaevents.EventSequence.Event.partitionMarker:type_name -> armadaevents.PartitionMarker
	45,  // 109: armadaevents.EventSequence.Event.jobRunPreemptionRequested:type_name -> armadaevents.JobRunPreemptionRequested
	12,  // 110: armadaevents.EventSequence.Event.jobRequeued:type_name -> armadaevents.JobRequeued
	46,  // 111: armadaevents.EventSequence.Event.jobPreemptionRequested:type_name -> armadaevents.JobPreemptionRequested
	48,  // 112: armadaevents.EventSequence.Event.jobRunCancelled:type_name -> armadaevents.JobRunCancelled
	47,  // 113: armadaevents.EventSequence.Event.jobValidated:type_name -> armadaevents.JobValidated
	64,  // 114: armadaevents.ResourceUtilisation.MaxResourcesForPeriodEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	64,  // 115: armadaevents.ResourceUtilisation.TotalCumulativeUsageEntry.value:type_name -> k8s.io.apimachinery.pkg.api.resource.Quantity
	116, // [116:116] is the sub-list for method output_type
	116, // [116:116] is the sub-list for method input_type
	116, // [116:116] is the sub-list for extension type_name
	116, // [116:116] is the sub-list for extension extendee
	0,   // [0:116] is the sub-list for field type_name
}

func init() { file_pkg_armadaevents_events_proto_init() }
func file_pkg_armadaevents_events_proto_init() {
	if File_pkg_armadaevents_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_armadaevents_events_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*EventSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceUtilisation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Uuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesMainObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ObjectMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PodSpecWithAvoidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*JobSpecWithAvoidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ReprioritiseJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*JobRequeued); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ReprioritiseJobSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ReprioritisedJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CancelJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*JobSetFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CancelJobSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CancelledJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*JobSucceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunLeased); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunAssigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunRunning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesResourceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*PodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*IngressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*StandaloneIngressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunSucceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*JobErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*KubernetesError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*PodError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ContainerError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*PodLeaseReturned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*PodTerminated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutorError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PodUnschedulable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*LeaseExpired); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*MaxRunsExceeded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunPreemptedError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GangJobUnschedulable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*JobRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunPreempted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*PartitionMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunPreemptionRequested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*JobPreemptionRequested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*JobValidated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*JobRunCancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_armadaevents_events_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*EventSequence_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_armadaevents_events_proto_msgTypes[4].OneofWrappers = []any{
		(*KubernetesMainObject_PodSpec)(nil),
		(*KubernetesMainObject_JobSpec)(nil),
	}
	file_pkg_armadaevents_events_proto_msgTypes[5].OneofWrappers = []any{
		(*KubernetesObject_PodSpec)(nil),
		(*KubernetesObject_Ingress)(nil),
		(*KubernetesObject_Service)(nil),
		(*KubernetesObject_ConfigMap)(nil),
		(*KubernetesObject_JobSpec)(nil),
	}
	file_pkg_armadaevents_events_proto_msgTypes[21].OneofWrappers = []any{
		(*KubernetesResourceInfo_PodInfo)(nil),
		(*KubernetesResourceInfo_IngressInfo)(nil),
	}
	file_pkg_armadaevents_events_proto_msgTypes[28].OneofWrappers = []any{
		(*Error_KubernetesError)(nil),
		(*Error_ContainerError)(nil),
		(*Error_ExecutorError)(nil),
		(*Error_PodUnschedulable)(nil),
		(*Error_LeaseExpired)(nil),
		(*Error_MaxRunsExceeded)(nil),
		(*Error_PodError)(nil),
		(*Error_PodLeaseReturned)(nil),
		(*Error_PodTerminated)(nil),
		(*Error_JobRunPreemptedError)(nil),
		(*Error_GangJobUnschedulable)(nil),
		(*Error_JobRejected)(nil),
	}
	file_pkg_armadaevents_events_proto_msgTypes[47].OneofWrappers = []any{
		(*EventSequence_Event_SubmitJob)(nil),
		(*EventSequence_Event_ReprioritiseJob)(nil),
		(*EventSequence_Event_ReprioritiseJobSet)(nil),
		(*EventSequence_Event_ReprioritisedJob)(nil),
		(*EventSequence_Event_CancelJob)(nil),
		(*EventSequence_Event_CancelJobSet)(nil),
		(*EventSequence_Event_CancelledJob)(nil),
		(*EventSequence_Event_JobSucceeded)(nil),
		(*EventSequence_Event_JobErrors)(nil),
		(*EventSequence_Event_JobRunLeased)(nil),
		(*EventSequence_Event_JobRunAssigned)(nil),
		(*EventSequence_Event_JobRunRunning)(nil),
		(*EventSequence_Event_JobRunSucceeded)(nil),
		(*EventSequence_Event_JobRunErrors)(nil),
		(*EventSequence_Event_StandaloneIngressInfo)(nil),
		(*EventSequence_Event_ResourceUtilisation)(nil),
		(*EventSequence_Event_JobRunPreempted)(nil),
		(*EventSequence_Event_PartitionMarker)(nil),
		(*EventSequence_Event_JobRunPreemptionRequested)(nil),
		(*EventSequence_Event_JobRequeued)(nil),
		(*EventSequence_Event_JobPreemptionRequested)(nil),
		(*EventSequence_Event_JobRunCancelled)(nil),
		(*EventSequence_Event_JobValidated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_armadaevents_events_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_armadaevents_events_proto_goTypes,
		DependencyIndexes: file_pkg_armadaevents_events_proto_depIdxs,
		EnumInfos:         file_pkg_armadaevents_events_proto_enumTypes,
		MessageInfos:      file_pkg_armadaevents_events_proto_msgTypes,
	}.Build()
	File_pkg_armadaevents_events_proto = out.File
	file_pkg_armadaevents_events_proto_rawDesc = nil
	file_pkg_armadaevents_events_proto_goTypes = nil
	file_pkg_armadaevents_events_proto_depIdxs = nil
}
